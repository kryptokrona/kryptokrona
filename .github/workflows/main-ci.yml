name: Kryptokrona Main Pipeline

env:
  GITHUB_REGISTRY: 'ghcr.io'
  GITHUB_OWNER: 'kryptokrona'
  GITHUB_DOCKER_IMAGE: 'kryptokrona'

on:
  push:
    branches:
      - master

jobs:
  build:
    name: 'Build: ${{ matrix.config.name }} / ${{ matrix.platform }}'
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        platform: [x86, x64]
        config:
          - {
            name: "Windows Latest MSVC", artifact: "windows-MSVC.7z",
            os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Ubuntu Latest GCC", artifact: "linux.7z",
            os: ubuntu-22.04,
            cc: "gcc", cxx: "g++"
          }
          # intel
    #       - {
    #         name: "macOS Latest Clang", artifact: "macOS.7z",
    #         os: macos-latest,
    #         cc: "clang", cxx: "clang++"
    #       }
          # arm64
    steps:
      - uses: actions/checkout@v2

      # Windows MSVC
      - name: Install Dependencies
        if: matrix.config.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: Install Boost
        uses: MarkusJx/install-boost@v2.3.1
        if: matrix.config.os == 'windows-latest'
        id: install-boost
        with:
            # REQUIRED: Specify the required boost version
            # A list of supported versions can be found here:
            # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
            boost_version: 1.74.0
            # OPTIONAL: Specify a custon install location
            boost_install_dir: C:\Boost\boost_1_74_0
            # OPTIONAL: Specify a platform version
            platform_version: 2019
            # OPTIONAL: Specify a toolset
            toolset: msvc

      - name: mkdir build
        if: matrix.config.os == 'windows-latest'
        run: mkdir build

      - name: Build windows Target using Visual C++
        if: matrix.config.os == 'windows-latest'
        working-directory: build
        run: |
          cmake -G "Visual Studio 17 2022" -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17" -DBOOST_ROOT=C:/Boost/boost_1_74_0 -DBoost_ARCHITECTURE=-x64 ..

      # Ubuntu 22.04
      - name: Install Dependencies
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-dev libboost-all-dev libssl-dev libffi-dev python3-dev gcc-11 g++-11 git cmake librocksdb-dev cron rpcbind libboost-system1.74.0 libboost-filesystem1.74.0 libboost-thread1.74.0 libboost-date-time1.74.0 libboost-chrono1.74.0 libboost-regex1.74.0 libboost-serialization1.74.0 libboost-program-options1.74.0 libicu70

      - name: mkdir build
        if: matrix.config.os == 'ubuntu-22.04'
        run: mkdir build

      - name: Build Ubuntu Target
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          cmake -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17" -DBoost_ARCHITECTURE=-x64 .. # add flag -DBoost_DEBUG=ON to debug
          make -j$(nproc) --ignore-errors
        working-directory: build

      # MacOS
      #- name: Install Dependencies
      #  if: matrix.config.os == 'ubuntu-22.04'
      #  run: d

  test:
    name: Tests
    #name: 'Test: ${{ matrix.config.os }} / ${{ matrix.platform }}'
    runs-on: ubuntu-22.04
    needs: [ build ]
    steps:
      - uses: actions/checkout@v2

      - name: Static Code Analysis
        run: echo "Running Static Code Analysis..."

      - name: Unit Test
        run: echo "Running Unit Tests..."

      - name: Code Coverage
        run: echo "Running Code Coverage..."

  doxygen:
    name: Doxygen
    runs-on: ubuntu-22.04
    needs: [ test ]
    steps:
    - uses: actions/checkout@v2

    - name: Doxygen
      run: echo "Running Doxygen..."

  docker:
    name: Build and Publish Docker Image
    runs-on: ubuntu-22.04
    needs: [ doxygen ]
    steps:
      - uses: actions/checkout@v2
      - uses: benjlevesque/short-sha@v1.2

      - name: Log into registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker
        run: |
          docker build -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} .

      - name: Publish Docker
        run: |
          docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }}