name: Kryptokrona Main Pipeline

env:
  GITHUB_REGISTRY: 'ghcr.io'
  GITHUB_OWNER: 'kryptokrona'
  GITHUB_DOCKER_IMAGE: 'kryptokrona'

on:
  push:
    branches:
      - master

jobs:
  build:
    name: 'Build: ${{ matrix.config.name }} / ${{ matrix.platform }}'
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        platform: [x64] # should we add x86?
        config:
          # should we add 2016 as well?
          # - {
          #   name: "Windows 2019 MSVC", artifact: "windows-MSVC.7z",
          #   os: windows-2019,
          #   cc: "cl", cxx: "cl",
          #   environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          # }
          - {
            name: "Ubuntu Latest GCC", artifact: "linux.7z",
            os: ubuntu-22.04,
            cc: "gcc", cxx: "g++"
          }
          # intel
          - {
            name: "macOS Latest Clang", artifact: "macOS.7z",
            os: macos-latest,
            cc: "clang", cxx: "clang++"
          }
          # arm64
    steps:
      - uses: actions/checkout@v2

      # Windows MSVC
      # - name: Install Dependencies
      #   if: matrix.config.os == 'windows-2019'
      #   uses: microsoft/setup-msbuild@v1.1
      #   with:
      #     msbuild-architecture: x64

      # - name: Install boost
      #   uses: MarkusJx/install-boost@v2.3.1
      #   if: matrix.config.os == 'windows-2019'
      #   id: install-boost
      #   with:
      #       boost_version: 1.74.0
      #       boost_install_dir: C:\boost_1_74_0
      #       platform_version: 2019

      # - name: Build windows Target using Visual C++
      #   if: matrix.config.os == 'windows-2019'
      #   run: |
      #     cmake . -G "Visual Studio 16 2019" -B build -DCMAKE_BUILD_TYPE=Release -DBoost_LIBRARY_DIRS=${{ steps.install-boost.outputs.BOOST_ROOT }}\lib -DBoost_INCLUDE_DIR=${{ steps.install-boost.outputs.BOOST_ROOT }}\include\boost-1_74\boost -DBOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}
      #   env:
      #     BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      # Ubuntu 22.04
      - name: Install Dependencies
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-dev libboost-all-dev libssl-dev libffi-dev python3-dev gcc-11 g++-11 git cmake librocksdb-dev cron rpcbind libboost-system1.74.0 libboost-filesystem1.74.0 libboost-thread1.74.0 libboost-date-time1.74.0 libboost-chrono1.74.0 libboost-regex1.74.0 libboost-serialization1.74.0 libboost-program-options1.74.0 libicu70

      - name: Build Ubuntu Target
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          cmake . -B build -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17"
      
      - name: Make
        if: matrix.config.os == 'ubuntu-22.04'
        run: make
        working-directory: build

      - uses: actions/upload-artifact@v3
        with:
          name: ubuntu-x64-build
          path: |
            build/src/kryptokrona_daemon
            build/src/kryptokrona_wallet
            build/src/kryptokrona_wallet_beta
            build/src/kryptokrona_service
            build/src/kryptokrona_miner
            build/src/kryptokrona_crypto_test
            build/src/kryptokrona_wallet_api

      # macOS Intel
      - name: Install Dependencies
        if: matrix.config.os == 'macos-latest'
        run: |
          which brew || /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
          brew install --force cmake boost llvm
          export CC=/usr/local/opt/llvm/bin/clang
          export CXX=/usr/local/opt/llvm/bin/clang++

      - name: Build Mac Target
        if: matrix.config.os == 'macos-latest'
        run: |
          cmake . -B build
      
      - name: Make
        if: matrix.config.os == 'macos-latest'
        run: make
        working-directory: build

      - uses: actions/upload-artifact@v3
        with:
          name: macos-x64-build
          path: |
            build/src/kryptokrona_daemon
            build/src/kryptokrona_wallet
            build/src/kryptokrona_wallet_beta
            build/src/kryptokrona_service
            build/src/kryptokrona_miner
            build/src/kryptokrona_crypto_test
            build/src/kryptokrona_wallet_api

  test:
    name: Tests
    #name: 'Test: ${{ matrix.config.os }} / ${{ matrix.platform }}'
    runs-on: ubuntu-22.04
    needs: [ build ]
    steps:
      - uses: actions/checkout@v2

      - name: Static Code Analysis
        run: echo "Running Static Code Analysis..."

      - name: Unit Test
        run: echo "Running Unit Tests..."

      - name: Code Coverage
        run: echo "Running Code Coverage..."

  doxygen:
    name: Doxygen
    runs-on: ubuntu-22.04
    needs: [ test ]
    steps:
    - uses: actions/checkout@v2

    - name: Doxygen
      run: echo "Running Doxygen..."

  docker:
    name: Build and Publish Docker Image
    runs-on: ubuntu-22.04
    needs: [ doxygen ]
    steps:
      - uses: actions/checkout@v2
      - uses: benjlevesque/short-sha@v1.2

      - name: Log into registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker
        run: |
          docker build -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} .

      - name: Publish Docker
        run: |
          docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }}