name: Kryptokrona Main Pipeline

env:
  GITHUB_REGISTRY: 'ghcr.io'
  GITHUB_OWNER: 'kryptokrona'
  GITHUB_DOCKER_IMAGE: 'kryptokrona'

on:
  push:
    branches:
      - master

jobs:
  clean:
    name: Clean
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Clean
        run: echo "Running Clean..."

  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install General
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev gcc-11 g++-11 git cmake librocksdb-dev cron rpcbind libboost-system1.74.0 libboost-filesystem1.74.0 libboost-thread1.74.0 libboost-date-time1.74.0 libboost-chrono1.74.0 libboost-regex1.74.0 libboost-serialization1.74.0 libboost-program-options1.74.0 libicu70

      - name: Cache Boost
        uses: actions/cache@v1.0.3
        id: cache-boost
        with:
          path: "~/boost"
          key: libboost-all-dev
      - name: Install Boost
        env:
          CACHE_HIT: ${{steps.cache-boost.outputs.cache-hit}}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --force --recursive ~/boost/* /
          else
            sudo apt-get update && sudo apt-get install -yq libboost-all-dev
            mkdir -p ~/boost
            for dep in libboost-all-dev; do
                dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/boost/
            done
          fi

  build:
    name: Build Target
    runs-on: ubuntu-latest
    needs: [ install ]
    steps:
      - uses: actions/checkout@v2

      - name: Create Build Dir
        run: mkdir build
      - name: CMake
        run: (cd build && cmake -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17" ..)
      - name: Make
        run: (cd build && make -j$(nproc) --ignore-errors)

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v2

      - name: Static Code Analysis
        run: echo "Running Static Code Analysis..."

      - name: Unit Test
        run: echo "Running Unit Tests..."

      - name: Code Coverage
        run: echo "Running Code Coverage..."

  doxygen:
    name: Doxygen
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
    - uses: actions/checkout@v2

    - name: Doxygen
      run: echo "Running Doxygen..."

  docker:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    needs: [ doxygen ]
    steps:
      - uses: actions/checkout@v2
      - uses: benjlevesque/short-sha@v1.2

      - name: Log into registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker
        run: |
          docker build -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} .

      - name: Publish Docker
        run: |
          docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }}