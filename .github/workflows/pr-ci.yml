name: Kryptokrona Pull Request Pipeline

on: [pull_request]

jobs:
  build:
    name: "Build: ${{ matrix.config.name }} / ${{ matrix.config.platform }}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - {
              name: "Windows 2019 MSVC",
              artifact: "kryptokrona-windows-19-msvc",
              os: windows-2019,
              cc: "cl",
              cxx: "cl",
              environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
              platform: x64,
            }
          - {
              name: "Ubuntu 20.04 GCC",
              artifact: "kryptokrona-ubuntu-20.zip",
              os: ubuntu-20.04,
              cc: "gcc",
              cxx: "g++",
              platform: x64,
            }
          - {
              name: "Ubuntu 22.04 GCC",
              artifact: "kryptokrona-ubuntu-22.zip",
              os: ubuntu-22.04,
              cc: "gcc",
              cxx: "g++",
              platform: x64,
            }
    steps:
      - uses: actions/checkout@v2

      # Windows MSVC
      - name: "Install Dependencies"
        if: matrix.config.os == 'windows-2019'
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      # need to test this on a windows computer first (do not extract the files yet)
      - name: "Install Boost"
        if: matrix.config.os == 'windows-2019'
        run: |
          Invoke-WebRequest -Uri https://boostorg.jfrog.io/artifactory/main/release/1.74.0/source/boost_1_74_0.zip -OutFile 'C:\boost_1_74_0.zip'
          Expand-Archive C:\boost_1_74_0.zip -DestinationPath C:\Tmp\boost_1_74_0
          Set-Location -Path "C:\Tmp\boost_1_74_0\boost_1_74_0\tools\build"
          (Resolve-Path .\).Path
          Get-ChildItem
          Start-Process ".\bootstrap.bat" -Wait -NoNewWindow
          b2 variant=release address-model=64 link=shared toolset=msvc
          b2 --prefix=C:\Boost\boost_1_74_0 install
          $env:PATH += ";C:\Boost\boost_1_74_0\bin"

      - name: "Creating Build Dir"
        if: matrix.config.os == 'windows-2019'
        run: mkdir build

      - name: "Build Target"
        if: matrix.config.os == 'windows-2019'
        working-directory: build
        run: |
          cmake -G "Visual Studio 17 2022" -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17" -DBOOST_ROOT=C:/Boost/boost_1_74_0 -DBoost_ARCHITECTURE=-x64 ..

      # Ubuntu
      - name: "Install Dependencies"
        if: matrix.config.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-dev libboost-all-dev libssl-dev libffi-dev python3-dev gcc-11 g++-11 git cmake librocksdb-dev cron rpcbind libboost-system1.71.0 libboost-filesystem1.71.0 libboost-thread1.71.0 libboost-date-time1.71.0 libboost-chrono1.71.0 libboost-regex1.71.0 libboost-serialization1.71.0 libboost-program-options1.71.0 libicu66

      - name: "Install Dependencies"
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-dev libboost-all-dev libssl-dev libffi-dev python3-dev gcc-11 g++-11 git cmake librocksdb-dev cron rpcbind libboost-system1.74.0 libboost-filesystem1.74.0 libboost-thread1.74.0 libboost-date-time1.74.0 libboost-chrono1.74.0 libboost-regex1.74.0 libboost-serialization1.74.0 libboost-program-options1.74.0 libicu70

      - name: "Creating Build Dir"
        if: ${{ contains(matrix.config.name, 'ubuntu') }}
        run: mkdir build

      - name: "Build Target"
        if: ${{ contains(matrix.config.name, 'ubuntu') }}
        run: |
          cmake -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17" -DBoost_ARCHITECTURE=-x64 .. # add flag -DBoost_DEBUG=ON to debug
          make -j$(nproc) --ignore-errors
        working-directory: build

  test:
    name: Tests
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - name: Static Code Analysis
        run: echo "Running Static Code Analysis..."

      - name: Unit Test
        run: echo "Running Unit Tests..."

      - name: Code Coverage
        run: echo "Running Code Coverage..."
