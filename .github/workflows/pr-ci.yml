name: Kryptokrona Pull Request Pipeline

on: [pull_request]

jobs:
  build:
    name: "Build: ${{ matrix.config.name }} / ${{ matrix.config.platform }}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - {
              name: "Windows 2019 MSVC",
              artifact: "windows-MSVC.7z",
              os: windows-2019,
              cc: "cl",
              cxx: "cl",
              environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            }
          - {
              name: "Ubuntu 20.04 GCC",
              artifact: "kryptokrona-ubuntu-20.zip",
              os: ubuntu-20.04,
              cc: "gcc",
              cxx: "g++",
              platform: x64,
            }
          - {
              name: "Ubuntu 22.04 GCC",
              artifact: "kryptokrona-ubuntu-22.zip",
              os: ubuntu-22.04,
              cc: "gcc",
              cxx: "g++",
              platform: x64,
            }
    steps:
      - uses: actions/checkout@v2

      # Windows
      - name: Install Dependencies
        if: matrix.config.os == 'windows-2019'
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.3
        if: matrix.config.os == 'windows-2019'
        id: install-boost
        with:
          boost_version: 1.74.0
          boost_install_dir: C:\boost_1_74_0
          platform_version: 2019

      - name: Build windows Target using Visual C++
        if: matrix.config.os == 'windows-2019'
        run: |
          cmake . -G "Visual Studio 16 2019" -B build -DCMAKE_BUILD_TYPE=Release -DBoost_LIBRARY_DIRS=${{ steps.install-boost.outputs.BOOST_ROOT }}\lib -DBoost_INCLUDE_DIR=${{ steps.install-boost.outputs.BOOST_ROOT }}\include\boost-1_74\boost -DBOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Make
        if: matrix.config.os == 'windows-2019'
        run: cmake --build . --config Release
        working-directory: build

      # Ubuntu
      - name: "Install ${{ matrix.config.name }} Dependencies "
        if: matrix.config.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-dev libboost-all-dev libssl-dev libffi-dev python3-dev gcc-11 g++-11 git cmake librocksdb-dev cron rpcbind libboost-system1.71.0 libboost-filesystem1.71.0 libboost-thread1.71.0 libboost-date-time1.71.0 libboost-chrono1.71.0 libboost-regex1.71.0 libboost-serialization1.71.0 libboost-program-options1.71.0 libicu66

      - name: "Install ${{ matrix.config.name }} Dependencies "
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-dev libboost-all-dev libssl-dev libffi-dev python3-dev gcc-11 g++-11 git cmake librocksdb-dev cron rpcbind libboost-system1.74.0 libboost-filesystem1.74.0 libboost-thread1.74.0 libboost-date-time1.74.0 libboost-chrono1.74.0 libboost-regex1.74.0 libboost-serialization1.74.0 libboost-program-options1.74.0 libicu70

      - name: mkdir build
        if: ${{ contains(matrix.config.name, 'ubuntu') }}
        run: mkdir build

      - name: Build Ubuntu Target
        if: ${{ contains(matrix.config.name, 'ubuntu') }}
        run: |
          cmake -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17" -DBoost_ARCHITECTURE=-x64 .. # add flag -DBoost_DEBUG=ON to debug
          make -j$(nproc) --ignore-errors
        working-directory: build

  test:
    name: Tests
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - name: Static Code Analysis
        run: echo "Running Static Code Analysis..."

      - name: Unit Test
        run: echo "Running Unit Tests..."

      - name: Code Coverage
        run: echo "Running Code Coverage..."
