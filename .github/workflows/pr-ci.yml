name: Kryptokrona Pull Request Pipeline

on: [ pull_request ]

jobs:
  build:
    name: 'Build: ${{ matrix.config.name }} / ${{ matrix.platform }}'
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        platform: [x64] # should we add x86?
        config:
          - {
            name: "Windows 2019 MSVC", artifact: "windows-MSVC.7z",
            os: windows-2019,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Ubuntu Latest GCC", artifact: "linux.7z",
            os: ubuntu-22.04,
            cc: "gcc", cxx: "g++"
          }
    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-dev libboost-all-dev libssl-dev libffi-dev python3-dev gcc-11 g++-11 git cmake librocksdb-dev cron rpcbind libboost-system1.74.0 libboost-filesystem1.74.0 libboost-thread1.74.0 libboost-date-time1.74.0 libboost-chrono1.74.0 libboost-regex1.74.0 libboost-serialization1.74.0 libboost-program-options1.74.0 libicu70

      - name: Build Ubuntu Target
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          cmake . -B build -DCMAKE_CXX_FLAGS="-g0 -Os -fPIC -std=gnu++17"
      
      - name: Make
        if: matrix.config.os == 'ubuntu-22.04'
        run: make
        working-directory: build

      - uses: actions/upload-artifact@v3
        with:
          name: ubuntu-x64-build
          path: |
            build/src/kryptokrona_daemon
            build/src/kryptokrona_wallet
            build/src/kryptokrona_wallet_beta
            build/src/kryptokrona_service
            build/src/kryptokrona_miner
            build/src/kryptokrona_crypto_test
            build/src/kryptokrona_wallet_api


  test:
    name: Tests
    runs-on: ubuntu-22.04
    needs: [ build ]
    steps:
      - uses: actions/checkout@v2

      - name: Static Code Analysis
        run: echo "Running Static Code Analysis..."

      - name: Unit Test
        run: echo "Running Unit Tests..."

      - name: Code Coverage
        run: echo "Running Code Coverage..."